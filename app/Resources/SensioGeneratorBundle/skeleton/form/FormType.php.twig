<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TimeType;
{% if not configure_options_available %}
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
{% endif %}
use Symfony\Component\OptionsResolver\OptionsResolver;
{% endblock use_statements %}

{% block class_definition %}
class {{ form_class }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    {%- if fields|length > 0 %}
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder

        {%- for field in fields -%}

            {%- if field == 'created_at' or field == 'created_by' or field == 'updated_at' or field == 'updated_by' %}

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'datetime' %}

            ->add('{{ field }}', DateTimeType::class, ['format' => 'yyyy-MM-dd HH:mm', 'widget' => 'single_text', 'attr' => ['class' => 'datetimepicker form-control']])

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'date' %}

            ->add('{{ field }}', DateType::class, ['format' => 'yyyy-MM-dd', 'widget' => 'single_text', 'attr' => ['class' => 'datetimepicker form-control']])

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'time' %}

            ->add('{{ field }}', Time::class, ['attr' => ['class' => '']])

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'boolean' %}

            ->add('{{ field }}', null, ['attr' => ['class' => '']])

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'integer' %}

            ->add('{{ field }}', null, ['attr' => ['class' => 'form-control']])

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'text' %}

            ->add('{{ field }}', null, ['attr' => ['class' => 'wysiwyg form-control', 'style' => 'height: 200px']])

            {%- elseif fields_mapping[field] is defined and fields_mapping[field]['type'] == 'string' %}

            ->add('{{ field }}', null, ['attr' => ['class' => 'form-control']])

            {%- else %}

            ->add('{{ field }}', null, ['attr' => ['class' => 'select2 form-control']])

            {%- endif -%}
        {%- endfor %}

        ;
    }
    {% endif %}

    {%- if not configure_options_available %}

    /**
     * Sets the default options for this type.
     *
     * This method should be removed when upgrading to Symfony 2.7.
     *
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $this->configureOptions($resolver);
    }
    {% endif %}

    /**
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '{{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}'
        ));
    }

    {%- if get_name_required %}

    /**
     * @return string
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }
    {% endif %}

{% endblock class_body %}
}
